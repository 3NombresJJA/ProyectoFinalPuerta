// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/10/2023 09:21:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ProyectoFinal
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ProyectoFinal_vlg_sample_tst(
	CLK,
	Sensor1,
	Sensor2,
	sampler_tx
);
input  CLK;
input  Sensor1;
input  Sensor2;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or Sensor1 or Sensor2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ProyectoFinal_vlg_check_tst (
	Close,
	Cont0,
	Cont1,
	Cont2,
	Cont3,
	Open,
	Q0,
	Q1,
	Temp,
	sampler_rx
);
input  Close;
input  Cont0;
input  Cont1;
input  Cont2;
input  Cont3;
input  Open;
input  Q0;
input  Q1;
input  Temp;
input sampler_rx;

reg  Close_expected;
reg  Cont0_expected;
reg  Cont1_expected;
reg  Cont2_expected;
reg  Cont3_expected;
reg  Open_expected;
reg  Q0_expected;
reg  Q1_expected;
reg  Temp_expected;

reg  Close_prev;
reg  Cont0_prev;
reg  Cont1_prev;
reg  Cont2_prev;
reg  Cont3_prev;
reg  Open_prev;
reg  Q0_prev;
reg  Q1_prev;
reg  Temp_prev;

reg  Close_expected_prev;
reg  Cont0_expected_prev;
reg  Cont1_expected_prev;
reg  Cont2_expected_prev;
reg  Cont3_expected_prev;
reg  Open_expected_prev;
reg  Q0_expected_prev;
reg  Q1_expected_prev;
reg  Temp_expected_prev;

reg  last_Close_exp;
reg  last_Cont0_exp;
reg  last_Cont1_exp;
reg  last_Cont2_exp;
reg  last_Cont3_exp;
reg  last_Open_exp;
reg  last_Q0_exp;
reg  last_Q1_exp;
reg  last_Temp_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	Close_prev = Close;
	Cont0_prev = Cont0;
	Cont1_prev = Cont1;
	Cont2_prev = Cont2;
	Cont3_prev = Cont3;
	Open_prev = Open;
	Q0_prev = Q0;
	Q1_prev = Q1;
	Temp_prev = Temp;
end

// update expected /o prevs

always @(trigger)
begin
	Close_expected_prev = Close_expected;
	Cont0_expected_prev = Cont0_expected;
	Cont1_expected_prev = Cont1_expected;
	Cont2_expected_prev = Cont2_expected;
	Cont3_expected_prev = Cont3_expected;
	Open_expected_prev = Open_expected;
	Q0_expected_prev = Q0_expected;
	Q1_expected_prev = Q1_expected;
	Temp_expected_prev = Temp_expected;
end



// expected Close
initial
begin
	Close_expected = 1'bX;
end 

// expected Open
initial
begin
	Open_expected = 1'bX;
end 

// expected Q1
initial
begin
	Q1_expected = 1'bX;
end 

// expected Q0
initial
begin
	Q0_expected = 1'bX;
end 

// expected Temp
initial
begin
	Temp_expected = 1'bX;
end 

// expected Cont3
initial
begin
	Cont3_expected = 1'bX;
end 

// expected Cont2
initial
begin
	Cont2_expected = 1'bX;
end 

// expected Cont1
initial
begin
	Cont1_expected = 1'bX;
end 

// expected Cont0
initial
begin
	Cont0_expected = 1'bX;
end 
// generate trigger
always @(Close_expected or Close or Cont0_expected or Cont0 or Cont1_expected or Cont1 or Cont2_expected or Cont2 or Cont3_expected or Cont3 or Open_expected or Open or Q0_expected or Q0 or Q1_expected or Q1 or Temp_expected or Temp)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Close = %b | expected Cont0 = %b | expected Cont1 = %b | expected Cont2 = %b | expected Cont3 = %b | expected Open = %b | expected Q0 = %b | expected Q1 = %b | expected Temp = %b | ",Close_expected_prev,Cont0_expected_prev,Cont1_expected_prev,Cont2_expected_prev,Cont3_expected_prev,Open_expected_prev,Q0_expected_prev,Q1_expected_prev,Temp_expected_prev);
	$display("| real Close = %b | real Cont0 = %b | real Cont1 = %b | real Cont2 = %b | real Cont3 = %b | real Open = %b | real Q0 = %b | real Q1 = %b | real Temp = %b | ",Close_prev,Cont0_prev,Cont1_prev,Cont2_prev,Cont3_prev,Open_prev,Q0_prev,Q1_prev,Temp_prev);
`endif
	if (
		( Close_expected_prev !== 1'bx ) && ( Close_prev !== Close_expected_prev )
		&& ((Close_expected_prev !== last_Close_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Close :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Close_expected_prev);
		$display ("     Real value = %b", Close_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Close_exp = Close_expected_prev;
	end
	if (
		( Cont0_expected_prev !== 1'bx ) && ( Cont0_prev !== Cont0_expected_prev )
		&& ((Cont0_expected_prev !== last_Cont0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cont0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cont0_expected_prev);
		$display ("     Real value = %b", Cont0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cont0_exp = Cont0_expected_prev;
	end
	if (
		( Cont1_expected_prev !== 1'bx ) && ( Cont1_prev !== Cont1_expected_prev )
		&& ((Cont1_expected_prev !== last_Cont1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cont1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cont1_expected_prev);
		$display ("     Real value = %b", Cont1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Cont1_exp = Cont1_expected_prev;
	end
	if (
		( Cont2_expected_prev !== 1'bx ) && ( Cont2_prev !== Cont2_expected_prev )
		&& ((Cont2_expected_prev !== last_Cont2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cont2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cont2_expected_prev);
		$display ("     Real value = %b", Cont2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Cont2_exp = Cont2_expected_prev;
	end
	if (
		( Cont3_expected_prev !== 1'bx ) && ( Cont3_prev !== Cont3_expected_prev )
		&& ((Cont3_expected_prev !== last_Cont3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cont3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cont3_expected_prev);
		$display ("     Real value = %b", Cont3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Cont3_exp = Cont3_expected_prev;
	end
	if (
		( Open_expected_prev !== 1'bx ) && ( Open_prev !== Open_expected_prev )
		&& ((Open_expected_prev !== last_Open_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Open :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Open_expected_prev);
		$display ("     Real value = %b", Open_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Open_exp = Open_expected_prev;
	end
	if (
		( Q0_expected_prev !== 1'bx ) && ( Q0_prev !== Q0_expected_prev )
		&& ((Q0_expected_prev !== last_Q0_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q0_exp = Q0_expected_prev;
	end
	if (
		( Q1_expected_prev !== 1'bx ) && ( Q1_prev !== Q1_expected_prev )
		&& ((Q1_expected_prev !== last_Q1_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Q1_exp = Q1_expected_prev;
	end
	if (
		( Temp_expected_prev !== 1'bx ) && ( Temp_prev !== Temp_expected_prev )
		&& ((Temp_expected_prev !== last_Temp_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Temp :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Temp_expected_prev);
		$display ("     Real value = %b", Temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Temp_exp = Temp_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ProyectoFinal_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg Sensor1;
reg Sensor2;
// wires                                               
wire Close;
wire Cont0;
wire Cont1;
wire Cont2;
wire Cont3;
wire Open;
wire Q0;
wire Q1;
wire Temp;

wire sampler;                             

// assign statements (if any)                          
ProyectoFinal i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.Close(Close),
	.Cont0(Cont0),
	.Cont1(Cont1),
	.Cont2(Cont2),
	.Cont3(Cont3),
	.Open(Open),
	.Q0(Q0),
	.Q1(Q1),
	.Sensor1(Sensor1),
	.Sensor2(Sensor2),
	.Temp(Temp)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 

// Sensor1
initial
begin
	Sensor1 = 1'b0;
	Sensor1 = #10000 1'b1;
	Sensor1 = #30000 1'b0;
	Sensor1 = #120000 1'b1;
	Sensor1 = #50000 1'b0;
end 

// Sensor2
initial
begin
	Sensor2 = 1'b0;
	Sensor2 = #30000 1'b1;
	Sensor2 = #60000 1'b0;
	Sensor2 = #70000 1'b1;
	Sensor2 = #50000 1'b0;
end 

ProyectoFinal_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.Sensor1(Sensor1),
	.Sensor2(Sensor2),
	.sampler_tx(sampler)
);

ProyectoFinal_vlg_check_tst tb_out(
	.Close(Close),
	.Cont0(Cont0),
	.Cont1(Cont1),
	.Cont2(Cont2),
	.Cont3(Cont3),
	.Open(Open),
	.Q0(Q0),
	.Q1(Q1),
	.Temp(Temp),
	.sampler_rx(sampler)
);
endmodule

